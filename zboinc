#!/usr/bin/python
#
# BOINC plugin for Zabbix v1.01 - 2014-02-19
# Attila Csaba Marosi <marosi.attila@sztaki.mta.hu>
# 
# - Requires argparse
# - Add something like the following to zabbix_agent.conf:
#   UserParameter=boinc[*],/usr/local/sbin/zboinc \
#        -c /usr/local/etc/zboinc.conf -a \$1 -s \$2

from __future__ import print_function
import sys
import logging
import logging.handlers
import argparse
import ConfigParser
import MySQLdb

zlogger = None

boinc_serverstate = {
        'inactive': 1,
        'unsent': 2,
        'inprogress': 4,
        'over': 5}

def loggingInit():
    global zlogger
    zlogger = logging.getLogger("zboinc")
    zhandler = logging.handlers.SysLogHandler(address = '/dev/log')
    format='%(name)s %(process)d %(levelname)s %(message)s'
    f = logging.Formatter(format)
    zhandler.setFormatter(f)
    zlogger.setLevel(logging.DEBUG)
    zlogger.addHandler(zhandler)
    debug("Logging to syslog initialized with default level {0}".format(logging.DEBUG))

def loggingSetLevel(log_level):
    LEVELS = {'DEBUG': logging.DEBUG,
              'INFO': logging.INFO,
              'WARNING': logging.WARNING,
              'ERROR': logging.ERROR,
              'CRITICAL': logging.CRITICAL}
    zlevel = LEVELS.get(log_level, logging.NOTSET)
    zlogger.setLevel(zlevel)
    debug("Logging level modified to {0}".format(zlevel))

def warning(*objs):
    if (zlogger is None):
        print("WARNING: ", *objs, end='\n', file=sys.stderr)
    else:
        zlogger.warning(*objs)   

def debug(*objs):
    if (zlogger is None):
        print("DEBUG: ", *objs, end='\n', file=sys.stderr)
    else:
        zlogger.debug(*objs)   

def doSqlQuery(db, sql, params):
    cursor = db.cursor()
    try:
        if (params is None):
            cursor.execute(sql)
        else:    
            cursor.execute(sql, params)
        results = cursor.fetchall()
    except:
        warning("SQL Query returned no results: '%s'." % sql)
        return -1 
    return results[0]

def getAppName(db, appid):
    sql = "SELECT name FROM app WHERE id=%s" 
    return doSqlQuery(db, sql, appid)

def getAppId(db, appname):
    sql = "SELECT id FROM app WHERE name=%s"
    return doSqlQuery(db, sql, appname)

def getResultCount(db, appname, serverstate):
    appFilter = ""
    stateFilter = ""
    stateValue = None 
    if (appname != "all"):
        appid = getAppId(db, appname)
        if (appid == -1):
            warning("AppId not found")
            return -1
        appFilter = "appid=%s " % appid
    if (serverstate in boinc_serverstate):
        stateFilter = "server_state=%s "
        stateValue = boinc_serverstate[serverstate]
    elif (serverstate != "all"):
        return -1
    sql = "SELECT COUNT(*) FROM result " 
    if (stateFilter != "") or (appFilter != ""):
        sql = sql + " WHERE "
    sql = sql + stateFilter
    if (stateFilter != "") and (appFilter != ""):
        sql = sql + " AND "
    sql = sql + appFilter
    return doSqlQuery(db, sql, stateValue)

def parseArguments():
    parser = argparse.ArgumentParser(description="Get result count for BOINC Applications.")
    parser.add_argument("-c", "--config",
            help="config file containing mysql access parameters", required=True)
    parser.add_argument("-a", "--appname", help="desired application name or all", 
            required=True)
    parser.add_argument("-s", "--serverstate", 
            help="desired server state for results: all/ unsent/ inprogress/ over", default="all")
    args = parser.parse_args()
    return args

def parseConfig(configpath):
    config = ConfigParser.ConfigParser()
    if not config.read(configpath):
       return -1 
    return config 

def failMiserably(message=""):
    if (message != ""):
        warning(message)
        debug(message)
    else:
        warning("no message")
        debug("no message")
    print("ZBX_NOTSUPPORTED") 
    sys.exit(255)

if __name__ == '__main__':
    db_host = ""
    db_pw = ""
    db_user = ""
    db_db = ""
    log_level = ""
    loggingInit()
    args = parseArguments()
    config = parseConfig(args.config)
    if (config == -1):
        failMiserably("Could not parse config file.")
    try:
        log_level = config.get('options', 'log-level')
        db_host = config.get('mysql', 'host')
        db_user = config.get('mysql', 'user')
        db_pw = config.get('mysql', 'password')
        db_db = config.get('mysql', 'db')
    except ConfigParser.Error:
        failMiserably("Could not get values from config file.")
    loggingSetLevel(log_level)
    try:
        db = MySQLdb.connect(db_host, db_user, db_pw, db_db)
    except MySQLdb.Error:
        failMiserably("Could not connect to mysql/ database. Check config file."); 
    result = getResultCount(db, args.appname, args.serverstate)
    if (result == -1):
        failMiserably("query appname={0}, serverstate={1} failed".format(args.appname, 
            args.serverstate))
    else:
        print(*result)
        debug("result of query appname={0}, serverstate={1} is: {2}".format(args.appname, 
            args.serverstate, *result))
    sys.exit(0)
